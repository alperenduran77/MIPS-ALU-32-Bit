module mux8to1(
    input [31:0] in0, in1, in2, in3, in4, in5, in6, in7,
    input [2:0] select,
    output [31:0] out
);
    wire [31:0] mux_out0, mux_out1, mux_out2, mux_out3, mux_out4, mux_out5, mux_out6, mux_out7;

    mux2x1 mux_0[31:0] (.in0(in0), .in1(in1), .select(select[0]), .out(mux_out0));
    mux2x1 mux_1[31:0] (.in0(in2), .in1(in3), .select(select[0]), .out(mux_out1));
    mux2x1 mux_2[31:0] (.in0(in4), .in1(in5), .select(select[0]), .out(mux_out2));
    mux2x1 mux_3[31:0] (.in0(in6), .in1(in7), .select(select[0]), .out(mux_out3));

    mux2x1 mux_4[31:0] (.in0(mux_out0), .in1(mux_out1), .select(select[1]), .out(mux_out4));
    mux2x1 mux_5[31:0] (.in0(mux_out2), .in1(mux_out3), .select(select[1]), .out(mux_out5));

    mux2x1 mux_final[31:0] (.in0(mux_out4), .in1(mux_out5), .select(select[2]), .out(out));
endmodule

module mux2x1(
    input [31:0] in0, in1,
    input select,
    output [31:0] out
);
    wire [31:0] not_select;
    wire [31:0] and_out0, and_out1;

    // Inverting select
    not not_gate[31:0] (not_select, {32{select}});

    // AND operations
    and and_gate0[31:0] (and_out0, in0, not_select);
    and and_gate1[31:0] (and_out1, in1, {32{select}});

    // OR operation for final output
    or or_gate[31:0] (out, and_out0, and_out1);
endmodule
